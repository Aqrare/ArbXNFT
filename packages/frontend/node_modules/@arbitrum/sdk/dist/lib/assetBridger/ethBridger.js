/*
 * Copyright 2021, Offchain Labs, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* eslint-env node */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.EthBridger = void 0;
const ethers_1 = require("ethers");
const Inbox__factory_1 = require("../abi/factories/Inbox__factory");
const ArbSys__factory_1 = require("../abi/factories/ArbSys__factory");
const constants_1 = require("../dataEntities/constants");
const assetBridger_1 = require("./assetBridger");
const L1Transaction_1 = require("../message/L1Transaction");
const L2Transaction_1 = require("../message/L2Transaction");
const transactionRequest_1 = require("../dataEntities/transactionRequest");
const signerOrProvider_1 = require("../dataEntities/signerOrProvider");
const errors_1 = require("../dataEntities/errors");
/**
 * Bridger for moving ETH back and forth betwen L1 to L2
 */
class EthBridger extends assetBridger_1.AssetBridger {
    /**
     * Get a transaction request for an eth deposit
     * @param params
     * @returns
     */
    async getDepositRequest(params) {
        const inboxInterface = Inbox__factory_1.Inbox__factory.createInterface();
        const functionData = inboxInterface.encodeFunctionData('depositEth()');
        return {
            txRequest: {
                to: this.l2Network.ethBridge.inbox,
                value: params.amount,
                data: functionData,
                from: params.from,
            },
            isValid: async () => true,
        };
    }
    /**
     * Deposit ETH from L1 onto L2
     * @param params
     * @returns
     */
    async deposit(params) {
        await this.checkL1Network(params.l1Signer);
        const ethDeposit = (0, transactionRequest_1.isL1ToL2TransactionRequest)(params)
            ? params
            : await this.getDepositRequest(Object.assign(Object.assign({}, params), { from: await params.l1Signer.getAddress() }));
        const tx = await params.l1Signer.sendTransaction(Object.assign(Object.assign({}, ethDeposit.txRequest), params.overrides));
        return L1Transaction_1.L1TransactionReceipt.monkeyPatchEthDepositWait(tx);
    }
    /**
     * Get a transaction request for an eth withdrawal
     * @param params
     * @returns
     */
    async getWithdrawalRequest(params) {
        const iArbSys = ArbSys__factory_1.ArbSys__factory.createInterface();
        const functionData = iArbSys.encodeFunctionData('withdrawEth', [
            params.destinationAddress,
        ]);
        return {
            txRequest: {
                to: constants_1.ARB_SYS_ADDRESS,
                data: functionData,
                value: params.amount,
                from: params.from,
            },
            // we make this async and expect a provider since we
            // in the future we want to do proper estimation here
            /* eslint-disable @typescript-eslint/no-unused-vars */
            estimateL1GasLimit: async (l1Provider) => {
                //  measured 126998 - add some padding
                return ethers_1.BigNumber.from(130000);
            },
        };
    }
    /**
     * Withdraw ETH from L2 onto L1
     * @param params
     * @returns
     */
    async withdraw(params) {
        if (!signerOrProvider_1.SignerProviderUtils.signerHasProvider(params.l2Signer)) {
            throw new errors_1.MissingProviderArbSdkError('l2Signer');
        }
        await this.checkL2Network(params.l2Signer);
        const request = (0, transactionRequest_1.isL2ToL1TransactionRequest)(params)
            ? params
            : await this.getWithdrawalRequest(params);
        const tx = await params.l2Signer.sendTransaction(Object.assign(Object.assign({}, request.txRequest), params.overrides));
        return L2Transaction_1.L2TransactionReceipt.monkeyPatchWait(tx);
    }
}
exports.EthBridger = EthBridger;
